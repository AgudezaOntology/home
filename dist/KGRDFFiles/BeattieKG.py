from rdflib import *

BeattieGraph = Graph()

AgudezaOntologyNamespaceString = "http://www.semanticweb.org/rjbea/ontologies/2022/5/AgudezaOntology#"
OwlNamespaceString = "http://www.w3.org/2002/07/owl#"
RdfNamespaceString = "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
agdza = Namespace(AgudezaOntologyNamespaceString)
owl = Namespace(OwlNamespaceString)
rdf = Namespace(RdfNamespaceString)
BeattieGraph.bind("agdza", agdza)
BeattieGraph.bind("owl", owl)
BeattieGraph.bind("rdf", rdf)

#Establish the scholarly source
BeattieGraph.add((agdza.BeattieChapter, rdf.type, agdza.Analysis))
BeattieGraph.add((agdza.Beattie, rdf.type, agdza.Critic))
BeattieGraph.add((agdza.Beattie, agdza.wrote, agdza.BeattieChapter))
BeattieGraph.add((agdza.BeattieChapter, agdza.writtenBy, agdza.Beattie))
BeattieGraph.add((agdza.BeattieChapter, agdza.hasTitle, Literal("Acquired Ingenuity: The Conflation of Prudence With Ingenio in the Works of Baltasar Graci√°n")))
BeattieGraph.add((agdza.BeattieChapter, agdza.hasDate, Literal(2020)))

#KeyTerms considered by the critic
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.agudeza))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.concepto))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.ingenio))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.conceptus))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.conceit))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.juicio))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.prudence))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.reason))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.gusto))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.ser))
BeattieGraph.add((agdza.BeattieChapter, agdza.considers, agdza.parecer))

BeattieGraph.add((agdza.ingenio, rdf.type, agdza.IntellectualFaculty))
BeattieGraph.add((agdza.juicio, rdf.type, agdza.IntellectualFaculty))
BeattieGraph.add((agdza.prudence, rdf.type, agdza.IntellectualFaculty))
BeattieGraph.add((agdza.reason, rdf.type, agdza.IntellectualFaculty))
BeattieGraph.add((agdza.gusto, rdf.type, agdza.IntellectualFaculty))
BeattieGraph.add((agdza.intuition, rdf.type, agdza.IntellectualFaculty))

BeattieGraph.add((agdza.agudeza, rdf.type, agdza.CentralConcept))
BeattieGraph.add((agdza.concepto, rdf.type, agdza.CentralConcept))
BeattieGraph.add((agdza.conceit, rdf.type, agdza.CentralConcept))
BeattieGraph.add((agdza.conceptus, rdf.type, agdza.CentralConcept))

BeattieGraph.add((agdza.ser, rdf.type, agdza.OntologicalRealm))
BeattieGraph.add((agdza.parecer, rdf.type, agdza.OntologicalRealm))

BeattieGraph.add((agdza.IntellectualFaculty, owl.subClassOf, agdza.KeyTerm))
BeattieGraph.add((agdza.CentralConcept, owl.subClassOf, agdza.KeyTerm))
BeattieGraph.add((agdza.OntologicalRealm, owl.subClassOf, agdza.KeyTerm))

#Links between KeyTerms
BeattieGraph.add((agdza.juicio, agdza.equivalentTo, agdza.reason))
BeattieGraph.add((agdza.reason, agdza.equivalentTo, agdza.juicio))
BeattieGraph.add((agdza.agudeza, agdza.interdependentOn, agdza.concepto))
BeattieGraph.add((agdza.concepto, agdza.interdependentOn, agdza.agudeza))
BeattieGraph.add((agdza.agudeza, agdza.componentOf, agdza.conceptus))
BeattieGraph.add((agdza.concepto, agdza.componentOf, agdza.conceptus))
BeattieGraph.add((agdza.conceptus, agdza.composedOf, agdza.agudeza))
BeattieGraph.add((agdza.conceptus, agdza.composedOf, agdza.concepto))
BeattieGraph.add((agdza.ingenio, agdza.equivalentTo, agdza.intuition))
BeattieGraph.add((agdza.intuition, agdza.equivalentTo, agdza.ingenio))
BeattieGraph.add((agdza.gusto, agdza.equivalentTo, agdza.intuition))
BeattieGraph.add((agdza.intuition, agdza.equivalentTo, agdza.gusto))
BeattieGraph.add((agdza.reason, agdza.perfectedBy, agdza.prudence))
BeattieGraph.add((agdza.prudence, agdza.perfects, agdza.reason))
BeattieGraph.add((agdza.reason, agdza.perfectedInto, agdza.ingenio))
BeattieGraph.add((agdza.ingenio, agdza.perceives, agdza.conceptus))
BeattieGraph.add((agdza.conceptus, agdza.perceivedBy, agdza.ingenio))

#Other links
BeattieGraph.add((agdza.reason, agdza.contributesTo, agdza.ConnectionMaking))
BeattieGraph.add((agdza.intuition, agdza.contributesTo, agdza.ConnectionMaking))
BeattieGraph.add((agdza.ingenio, agdza.contributesTo, agdza.ConnectionMaking))
BeattieGraph.add((agdza.BeattieChapter, agdza.hasPhilosophicalScope, agdza.Ontology))
BeattieGraph.add((agdza.BeattieChapter, agdza.hasPhilosophicalScope, agdza.Epistemology))
BeattieGraph.add((agdza.BeattieChapter, agdza.hasPhilosophicalScope, agdza.Aesthetics))
BeattieGraph.add((agdza.BeattieChapter, agdza.hasPhilosophicalScope, agdza.Ethics))
BeattieGraph.add((agdza.BeattieChapter, agdza.usesSymbol, agdza.Sun))
BeattieGraph.add((agdza.BeattieChapter, agdza.usesSymbol, agdza.StarrySky))
BeattieGraph.add((agdza.BeattieChapter, agdza.usesSymbol, agdza.Cave))
BeattieGraph.add((agdza.Sun, agdza.symbolises, agdza.ser))
BeattieGraph.add((agdza.Sun, agdza.symbolises, agdza.Epistemology))
BeattieGraph.add((agdza.StarrySky, agdza.symbolises, agdza.ingenio))
BeattieGraph.add((agdza.StarrySky, agdza.symbolises, agdza.agudeza))
BeattieGraph.add((agdza.StarrySky, agdza.symbolises, agdza.concepto))
BeattieGraph.add((agdza.Cave, agdza.symbolises, agdza.parecer))
BeattieGraph.add((agdza.Cave, agdza.symbolises, agdza.Epistemology))
BeattieGraph.add((agdza.ser, agdza.symbolisedBy, agdza.Sun))
BeattieGraph.add((agdza.Epistemology, agdza.symbolisedBy, agdza.Sun))
BeattieGraph.add((agdza.ingenio, agdza.symbolisedBy, agdza.StarrySky))
BeattieGraph.add((agdza.agudeza, agdza.symbolisedBy, agdza.StarrySky))
BeattieGraph.add((agdza.concepto, agdza.symbolisedBy, agdza.StarrySky))
BeattieGraph.add((agdza.parecer, agdza.symbolisedBy, agdza.Cave))
BeattieGraph.add((agdza.Epistemology, agdza.symbolisedBy, agdza.Cave))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.SarmientoArticle))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.ParkerArticle))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.WoodsBook))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.BlancoBook))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.AndersenArticle))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.Heroe))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.Discreto))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.Criticon))
BeattieGraph.add((agdza.BeattieChapter, agdza.references, agdza.Comulgatorio))

BeattieGraph.add((agdza.Sun, rdf.type, agdza.SymbolicImagery))
BeattieGraph.add((agdza.StarrySky, rdf.type, agdza.SymbolicImagery))
BeattieGraph.add((agdza.Cave, rdf.type, agdza.SymbolicImagery))

BeattieGraph.add((agdza.Ontology, rdf.type, agdza.PhilosophicalScope))
BeattieGraph.add((agdza.Aesthetics, rdf.type, agdza.PhilosophicalScope))
BeattieGraph.add((agdza.Epistemology, rdf.type, agdza.PhilosophicalScope))
BeattieGraph.add((agdza.Ethics, rdf.type, agdza.PhilosophicalScope))

BeattieGraph.add((agdza.Heroe, rdf.type, agdza.OtherWork))
BeattieGraph.add((agdza.Discreto, rdf.type, agdza.OtherWork))
BeattieGraph.add((agdza.Criticon, rdf.type, agdza.OtherWork))
BeattieGraph.add((agdza.Comulgatorio, rdf.type, agdza.OtherWork))

BeattieGraph.add((agdza.SarmientoArticle, rdf.type, agdza.Analysis))
BeattieGraph.add((agdza.ParkerArticle, rdf.type, agdza.Analysis))
BeattieGraph.add((agdza.AndersenArticle, rdf.type, agdza.Analysis))
BeattieGraph.add((agdza.WoodsBook, rdf.type, agdza.Analysis))
BeattieGraph.add((agdza.BlancoBook, rdf.type, agdza.Analysis))
BeattieGraph.add((agdza.SarmientoArticle, agdza.writtenBy, agdza.Sarmiento))
BeattieGraph.add((agdza.ParkerArticle, agdza.writtenBy, agdza.Parker))
BeattieGraph.add((agdza.AndersenArticle, agdza.writtenBy, agdza.Andersen))
BeattieGraph.add((agdza.WoodsBook, agdza.writtenBy, agdza.Woods))
BeattieGraph.add((agdza.BlancoBook, agdza.writtenBy, agdza.Blanco))
BeattieGraph.add((agdza.Sarmiento, agdza.wrote, agdza.SarmientoArticle))
BeattieGraph.add((agdza.Parker, agdza.wrote, agdza.ParkerArticle))
BeattieGraph.add((agdza.Woods, agdza.wrote, agdza.WoodsBook))
BeattieGraph.add((agdza.Blanco, agdza.wrote, agdza.BlancoBook))
BeattieGraph.add((agdza.Andersen, agdza.wrote, agdza.AndersenArticle))
BeattieGraph.add((agdza.Sarmiento, rdf.type, agdza.Critic))
BeattieGraph.add((agdza.Parker, rdf.type, agdza.Critic))
BeattieGraph.add((agdza.Woods, rdf.type, agdza.Critic))
BeattieGraph.add((agdza.Blanco, rdf.type, agdza.Critic))
BeattieGraph.add((agdza.Andersen, rdf.type, agdza.Critic))

#Serialise graph in ttl format
print(BeattieGraph.serialize(format="ttl"))
